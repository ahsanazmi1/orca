#!/usr/bin/env python3
"""
Azure OpenAI Configuration Script for Orca Core Phase 2

This script interactively collects Azure OpenAI and Azure infrastructure
configuration details and writes them to the appropriate configuration files.
"""

import json
import sys
from pathlib import Path


def get_input(prompt: str, default: str = "", required: bool = True) -> str:
    """Get user input with optional default value."""
    if default:
        full_prompt = f"{prompt} [{default}]: "
    else:
        full_prompt = f"{prompt}: "

    while True:
        value = input(full_prompt).strip()
        if value:
            return value
        elif default:
            return default
        elif not required:
            return ""
        else:
            print("This field is required. Please enter a value.")


def validate_azure_endpoint(endpoint: str) -> bool:
    """Validate Azure OpenAI endpoint format."""
    return endpoint.startswith("https://") and ".openai.azure.com" in endpoint


def validate_azure_subscription_id(subscription_id: str) -> bool:
    """Validate Azure subscription ID format."""
    # Azure subscription IDs are typically 36-character GUIDs
    return len(subscription_id) == 36 and subscription_id.count("-") == 4


def collect_azure_config() -> dict[str, str]:
    """Collect Azure configuration from user input."""
    print("üîß Azure OpenAI Configuration for Orca Core Phase 2")
    print("=" * 60)
    print()
    print("This script will collect your Azure OpenAI and Azure infrastructure")
    print("configuration details. These will be used for Phase 2 AI/LLM features.")
    print()

    config = {}

    # Azure OpenAI Configuration
    print("üìã Azure OpenAI Configuration")
    print("-" * 30)

    while True:
        endpoint = get_input(
            "Azure OpenAI Endpoint (e.g., https://your-resource.openai.azure.com)", required=True
        )
        if validate_azure_endpoint(endpoint):
            config["AZURE_OPENAI_ENDPOINT"] = endpoint
            break
        else:
            print("‚ùå Invalid endpoint format. Should be: https://your-resource.openai.azure.com")

    config["AZURE_OPENAI_DEPLOYMENT"] = get_input(
        "Azure OpenAI Deployment Name", default="gpt-4o-mini", required=True
    )

    config["AZURE_OPENAI_API_KEY"] = get_input("Azure OpenAI API Key", required=True)

    print()
    print("üèóÔ∏è Azure Infrastructure Configuration")
    print("-" * 40)

    while True:
        subscription_id = get_input("Azure Subscription ID", required=True)
        if validate_azure_subscription_id(subscription_id):
            config["AZURE_SUBSCRIPTION_ID"] = subscription_id
            break
        else:
            print("‚ùå Invalid subscription ID format. Should be a 36-character GUID.")

    config["AZURE_TENANT_ID"] = get_input("Azure Tenant ID", required=True)

    config["AZURE_RESOURCE_GROUP"] = get_input(
        "Azure Resource Group Name", default="orca-rg", required=True
    )

    config["AZURE_ACR_NAME"] = get_input(
        "Azure Container Registry Name", default="orcaregistry", required=True
    )

    config["AZURE_AKS_NAME"] = get_input(
        "Azure Kubernetes Service Name", default="orca-aks", required=True
    )

    config["AZURE_KEYVAULT_NAME"] = get_input(
        "Azure Key Vault Name", default="orca-kv", required=True
    )

    return config


def write_env_file(config: dict[str, str], env_path: Path) -> None:
    """Write configuration to .env.local file."""
    print(f"üìù Writing configuration to {env_path}")

    with open(env_path, "w") as f:
        f.write("# Orca Core Phase 2 Azure Configuration\n")
        f.write("# Generated by configure_azure_openai.py\n")
        f.write("# DO NOT COMMIT THIS FILE TO VERSION CONTROL\n")
        f.write("\n")

        # Feature flags
        f.write("# Feature flags\n")
        f.write("ORCA_MODE=RULES_PLUS_AI\n")
        f.write("\n")

        # Azure OpenAI Configuration
        f.write("# Azure OpenAI Configuration\n")
        f.write(f"AZURE_OPENAI_ENDPOINT={config['AZURE_OPENAI_ENDPOINT']}\n")
        f.write(f"AZURE_OPENAI_API_KEY={config['AZURE_OPENAI_API_KEY']}\n")
        f.write(f"AZURE_OPENAI_DEPLOYMENT={config['AZURE_OPENAI_DEPLOYMENT']}\n")
        f.write("\n")

        # Orca Explanation Configuration
        f.write("# Orca Explanation Configuration\n")
        f.write("ORCA_EXPLAIN_MAX_TOKENS=300\n")
        f.write("ORCA_EXPLAIN_STRICT_JSON=true\n")
        f.write("ORCA_EXPLAIN_REFUSE_ON_UNCERTAINTY=true\n")
        f.write("\n")

        # Azure Infrastructure Configuration
        f.write("# Azure Infrastructure Configuration\n")
        f.write(f"AZURE_SUBSCRIPTION_ID={config['AZURE_SUBSCRIPTION_ID']}\n")
        f.write(f"AZURE_TENANT_ID={config['AZURE_TENANT_ID']}\n")
        f.write(f"AZURE_RESOURCE_GROUP={config['AZURE_RESOURCE_GROUP']}\n")
        f.write(f"AZURE_ACR_NAME={config['AZURE_ACR_NAME']}\n")
        f.write(f"AZURE_AKS_NAME={config['AZURE_AKS_NAME']}\n")
        f.write(f"AZURE_KEYVAULT_NAME={config['AZURE_KEYVAULT_NAME']}\n")
        f.write("\n")

        # Azure ML Configuration (placeholder)
        f.write("# Azure ML Configuration (to be configured separately)\n")
        f.write("# AZURE_ML_ENDPOINT=https://your-ml-endpoint.azureml.net\n")
        f.write("# AZURE_ML_KEY=your-ml-key\n")
        f.write("# AZURE_ML_MODEL_NAME=orca-risk-model\n")
        f.write("\n")

        # Debug UI Configuration
        f.write("# Debug UI Configuration\n")
        f.write("DEBUG_UI_ENABLED=true\n")
        f.write("DEBUG_UI_PORT=8501\n")


def write_azure_params(config: dict[str, str], params_path: Path) -> None:
    """Write configuration to Azure parameters file."""
    print(f"üìù Writing Azure parameters to {params_path}")

    # Create directory if it doesn't exist
    params_path.parent.mkdir(parents=True, exist_ok=True)

    azure_params = {
        "parameters": {
            "subscriptionId": {"value": config["AZURE_SUBSCRIPTION_ID"]},
            "tenantId": {"value": config["AZURE_TENANT_ID"]},
            "resourceGroupName": {"value": config["AZURE_RESOURCE_GROUP"]},
            "acrName": {"value": config["AZURE_ACR_NAME"]},
            "aksName": {"value": config["AZURE_AKS_NAME"]},
            "keyVaultName": {"value": config["AZURE_KEYVAULT_NAME"]},
            "openaiEndpoint": {"value": config["AZURE_OPENAI_ENDPOINT"]},
            "openaiDeployment": {"value": config["AZURE_OPENAI_DEPLOYMENT"]},
            "environment": {"value": "dev"},
        }
    }

    with open(params_path, "w") as f:
        json.dump(azure_params, f, indent=2)


def main() -> None:
    """Main configuration script."""
    try:
        # Get project root directory
        script_dir = Path(__file__).parent
        project_root = script_dir.parent

        # Define output paths
        env_path = project_root / ".env.local"
        params_path = project_root / "infra" / "azure" / "params" / "dev.json"

        # Check if .env.local already exists
        if env_path.exists():
            response = input(f"‚ö†Ô∏è {env_path} already exists. Overwrite? [y/N]: ").strip().lower()
            if response not in ["y", "yes"]:
                print("‚ùå Configuration cancelled.")
                sys.exit(1)

        # Collect configuration
        config = collect_azure_config()

        # Write configuration files
        write_env_file(config, env_path)
        write_azure_params(config, params_path)

        print()
        print("‚úÖ Azure OpenAI configuration completed successfully!")
        print()
        print("üìÅ Files created:")
        print(f"   ‚Ä¢ {env_path}")
        print(f"   ‚Ä¢ {params_path}")
        print()
        print("üîß Next steps:")
        print("   1. Review the generated configuration files")
        print("   2. Run 'make test-config' to validate your configuration")
        print("   3. Run 'make demo' to test the Phase 2 features")
        print()
        print("‚ö†Ô∏è  Security reminder:")
        print("   ‚Ä¢ .env.local contains sensitive information - DO NOT commit to git")
        print("   ‚Ä¢ Consider using Azure Key Vault for production deployments")

    except KeyboardInterrupt:
        print("\n‚ùå Configuration cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error during configuration: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
