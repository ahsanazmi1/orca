name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  REGISTRY_NAME: ${{ secrets.ACR_NAME }}
  IMAGE_NAME: orca-core-api
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  CLUSTER_NAME: ${{ secrets.AKS_NAME }}

jobs:
  # Create Release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        echo "📝 Generating changelog..."
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" --max-count=20)
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in this Release

          ${{ steps.changelog.outputs.changelog }}

          ## Docker Images

          - `${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}`
          - `${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest`

          ## Deployment

          This release is automatically deployed to production.
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

  # Build Release
  build-release:
    needs: create-release
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv pip install -e .

    - name: Train production XGBoost model
      run: |
        echo "🤖 Training production XGBoost model..."
        PYTHONPATH=src python -m orca_core.cli train-xgb --samples 50000

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest
          type=raw,value=${{ needs.create-release.outputs.version }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts-${{ needs.create-release.outputs.version }}
        path: models/
        retention-days: 90

  # Deploy to Production
  deploy-production:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login with OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --overwrite-existing

    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production..."

        # Create production deployment manifest
        cat > k8s-production.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: orca-core-api
          namespace: orca-core
          labels:
            app: orca-core-api
            environment: prod
            version: ${{ needs.create-release.outputs.version }}
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: orca-core-api
          template:
            metadata:
              labels:
                app: orca-core-api
                environment: prod
                version: ${{ needs.create-release.outputs.version }}
            spec:
              containers:
              - name: orca-core-api
                image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}
                ports:
                - containerPort: 8000
                env:
                - name: ORCA_DECISION_MODE
                  value: "RULES_PLUS_AI"
                - name: ORCA_USE_XGB
                  value: "true"
                - name: ORCA_EXPLAIN_ENABLED
                  value: "true"
                - name: AZURE_OPENAI_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: orca-secrets
                      key: AZURE_OPENAI_API_KEY
                - name: AZURE_OPENAI_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      name: orca-secrets
                      key: AZURE_OPENAI_ENDPOINT
                - name: AZURE_OPENAI_DEPLOYMENT
                  valueFrom:
                    secretKeyRef:
                      name: orca-secrets
                      key: AZURE_OPENAI_DEPLOYMENT
                resources:
                  requests:
                    memory: "1Gi"
                    cpu: "1000m"
                  limits:
                    memory: "2Gi"
                    cpu: "2000m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 8000
                  initialDelaySeconds: 5
                  periodSeconds: 5
        EOF

        # Apply deployment
        kubectl apply -f k8s-production.yaml

        # Wait for deployment to be ready
        kubectl rollout status deployment/orca-core-api --namespace=orca-core --timeout=600s

    - name: Verify production deployment
      run: |
        echo "🔍 Verifying production deployment..."
        kubectl get pods --namespace=orca-core -l app=orca-core-api
        kubectl get services --namespace=orca-core
        kubectl get deployment orca-core-api --namespace=orca-core

    - name: Run production health check
      run: |
        echo "🏥 Running production health check..."
        kubectl port-forward service/orca-core-api-service 8080:80 --namespace=orca-core &
        PORT_FORWARD_PID=$!
        sleep 15

        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1

        # Clean up port forward
        kill $PORT_FORWARD_PID

  # Notify Release
  notify-release:
    needs: [create-release, build-release, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify release status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Release ${{ needs.create-release.outputs.version }} deployed successfully to production!"
          echo "Docker Image: ${{ needs.build-release.outputs.image-tag }}"
        else
          echo "❌ Release ${{ needs.create-release.outputs.version }} deployment failed!"
          echo "Check the logs for details."
        fi


