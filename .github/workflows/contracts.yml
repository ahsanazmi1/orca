name: Contracts Validation

on:
  pull_request:
  push:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  OCKAM_VERSION: '0.0.4'

jobs:
  # Validate ocn-common schemas and contracts
  ocn-common-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -e .[dev]
        pip install jsonschema

    - name: Validate ocn-common schema structure
      run: |
        echo "üîç Validating ocn-common schema structure..."
        PYTHONPATH=src python -c "
        import json
        import jsonschema
        from pathlib import Path

        # Validate external/ocn-common structure
        ocn_common_path = Path('external/ocn-common')
        if not ocn_common_path.exists():
            print('‚ùå external/ocn-common directory not found')
            exit(1)

        # Load CloudEvents schemas
        events_path = ocn_common_path / 'common/events/v1'
        if not events_path.exists():
            print('‚ùå ocn-common/common/events/v1 directory not found')
            exit(1)

        schemas = {}
        for schema_file in events_path.glob('*.schema.json'):
            with open(schema_file) as f:
                schema = json.load(f)
                schemas[schema_file.name] = schema
                print(f'‚úÖ Loaded CloudEvents schema: {schema_file.name}')

        # Validate schema structure
        for name, schema in schemas.items():
            # Check required CloudEvents fields
            required_ce_fields = ['\$schema', '\$id', 'title', 'description', 'type', 'required', 'properties']
            for field in required_ce_fields:
                if field not in schema:
                    print(f'‚ùå Missing field {field} in {name}')
                    exit(1)

            # Check CloudEvents properties
            properties = schema['properties']
            ce_properties = ['specversion', 'id', 'source', 'type', 'subject', 'time', 'data']
            for prop in ce_properties:
                if prop not in properties:
                    print(f'‚ùå Missing CloudEvent property {prop} in {name}')
                    exit(1)

            # Validate JSON Schema
            try:
                jsonschema.Draft202012Validator.check_schema(schema)
                print(f'‚úÖ Schema {name} is valid JSON Schema')
            except jsonschema.SchemaError as e:
                print(f'‚ùå Invalid JSON Schema in {name}: {e}')
                exit(1)

        print('‚úÖ All ocn-common CloudEvents schemas are valid')
        "

    - name: Test contract validation integration
      run: |
        echo "üß™ Testing contract validation integration..."
        PYTHONPATH=src python -c "
        from src.orca.core.contract_validation import get_contract_validator, validate_decision_contract

        # Test validator initialization
        validator = get_contract_validator()
        print('‚úÖ Contract validator initialized')

        # Test AP2 decision validation
        sample_decision = {
            'ap2_version': '0.1.0',
            'intent': {'actor': {'id': 'test'}, 'channel': 'web', 'geo': {}, 'metadata': {}},
            'cart': {'amount': '100.00', 'currency': 'USD', 'items': [], 'geo': {}},
            'payment': {'method': 'card', 'modality': 'immediate', 'auth_requirements': [], 'metadata': {}},
            'decision': {'result': 'APPROVE', 'risk_score': 0.15, 'reasons': [], 'actions': [], 'meta': {}},
            'signing': {'vc_proof': None, 'receipt_hash': 'sha256:test'}
        }

        is_valid = validate_decision_contract(sample_decision)
        if is_valid:
            print('‚úÖ AP2 decision contract validation passed')
        else:
            print('‚ùå AP2 decision contract validation failed')
            exit(1)
        "

    - name: Validate examples and fixtures
      run: |
        echo "üìã Validating examples and fixtures against contracts..."
        PYTHONPATH=src python -c "
        import json
        from pathlib import Path
        from src.orca.core.contract_validation import get_contract_validator

        validator = get_contract_validator()

        # Validate fixture files
        fixtures_path = Path('fixtures/requests')
        if fixtures_path.exists():
            print(f'üîç Validating {len(list(fixtures_path.glob(\"*.json\")))} fixture files...')
            for fixture_file in fixtures_path.glob('*.json'):
                try:
                    with open(fixture_file) as f:
                        data = json.load(f)

                    # Basic validation - check if it's a valid decision request
                    if 'cart_total' in data or 'amount' in data:
                        print(f'‚úÖ Fixture {fixture_file.name} has valid structure')
                    else:
                        print(f'‚ö†Ô∏è  Fixture {fixture_file.name} may not be a valid decision request')

                except Exception as e:
                    print(f'‚ùå Error validating fixture {fixture_file.name}: {e}')

        # Validate sample files
        samples_path = Path('samples')
        if samples_path.exists():
            print(f'üîç Validating {len(list(samples_path.rglob(\"*.json\")))} sample files...')
            for sample_file in samples_path.rglob('*.json'):
                try:
                    with open(sample_file) as f:
                        data = json.load(f)
                    print(f'‚úÖ Sample {sample_file.name} is valid JSON')
                except Exception as e:
                    print(f'‚ùå Error validating sample {sample_file.name}: {e}')

        print('‚úÖ Examples and fixtures validation completed')
        "

  # Test CloudEvents integration
  cloudevents-integration:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -e .[dev]

    - name: Run CloudEvents tests
      run: |
        echo "üß™ Running CloudEvents integration tests..."
        PYTHONPATH=src python -m pytest tests/events/ -v --tb=short

    - name: Test CLI CloudEvents emission
      run: |
        echo "üñ•Ô∏è Testing CLI CloudEvents emission..."
        PYTHONPATH=src python -c "
        import os
        import json
        from src.orca.core.ce import get_cloud_event_emitter

        # Test decision CloudEvent emission
        emitter = get_cloud_event_emitter()

        decision_data = {
            'ap2_version': '0.1.0',
            'intent': {'actor': {'id': 'test'}, 'channel': 'web', 'geo': {}, 'metadata': {}},
            'cart': {'amount': '100.00', 'currency': 'USD', 'items': [], 'geo': {}},
            'payment': {'method': 'card', 'modality': 'immediate', 'auth_requirements': [], 'metadata': {}},
            'decision': {'result': 'APPROVE', 'risk_score': 0.15, 'reasons': [], 'actions': [], 'meta': {}},
            'signing': {'vc_proof': None, 'receipt_hash': 'sha256:test'}
        }

        ce = emitter.emit_decision_event(decision_data, 'txn_cli_test_123456', emit_to_subscriber=False)
        assert ce is not None
        assert ce.type == 'ocn.orca.decision.v1'
        print('‚úÖ CLI CloudEvents emission test passed')
        "

    - name: Test Weave subscriber
      run: |
        echo "üåê Testing Weave subscriber..."
        PYTHONPATH=. python -c "
        from weave.subscriber import SchemaValidator, WeaveClient

        # Test schema validator
        validator = SchemaValidator()
        print('‚úÖ Schema validator initialized')

        # Test Weave client
        weave_client = WeaveClient()
        print('‚úÖ Weave client initialized')

        # Test receipt storage
        receipt = weave_client.store_receipt(
            trace_id='txn_test_123456',
            receipt_hash='sha256:test_hash',
            event_type='decision'
        )
        assert receipt.trace_id == 'txn_test_123456'
        assert receipt.event_type == 'decision'
        print('‚úÖ Weave receipt storage test passed')
        "

  # Validate AP2 contract compatibility
  ap2-contract-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -e .[dev]

    - name: Validate AP2 contract samples
      run: |
        echo "üìã Validating AP2 contract samples..."
        PYTHONPATH=src python scripts/validate_samples.py

    - name: Test AP2 to CloudEvent conversion
      run: |
        echo "üîÑ Testing AP2 to CloudEvent conversion..."
        PYTHONPATH=src python -c "
        import json
        from src.orca_core.cli import _convert_response_to_ap2_format
        from src.orca_core.models import DecisionResponse

        # Create sample response
        response = DecisionResponse(
            decision='APPROVE',
            reasons=['low_risk'],
            actions=['process_payment'],
            meta={
                'transaction_id': 'txn_ap2_test_123456',
                'cart_total': 100.0,
                'channel': 'online',
                'risk_score': 0.15
            }
        )

        # Convert to AP2 format
        ap2_data = _convert_response_to_ap2_format(response)

        # Validate AP2 structure
        assert 'ap2_version' in ap2_data
        assert 'intent' in ap2_data
        assert 'cart' in ap2_data
        assert 'payment' in ap2_data
        assert 'decision' in ap2_data
        assert 'signing' in ap2_data

        print('‚úÖ AP2 to CloudEvent conversion test passed')
        print(f'AP2 version: {ap2_data[\"ap2_version\"]}')
        print(f'Decision result: {ap2_data[\"decision\"][\"result\"]}')
        "

  # Security validation for CloudEvents
  security-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -e .[dev]
        pip install bandit safety

    - name: Run security scan on CloudEvents code
      run: |
        echo "üîí Running security scan on CloudEvents code..."
        bandit -r src/orca/core/ce.py weave/subscriber.py -f json -o cloudevents-security-report.json || true

    - name: Check for known vulnerabilities
      run: |
        echo "üõ°Ô∏è Checking for known vulnerabilities..."
        safety check --json --output cloudevents-vulnerabilities.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: cloudevents-security-reports
        path: |
          cloudevents-security-report.json
          cloudevents-vulnerabilities.json
        retention-days: 30

  # Summary job
  contracts-summary:
    runs-on: ubuntu-latest
    needs: [ocn-common-validation, cloudevents-integration, ap2-contract-validation, security-validation]
    if: always()
    steps:
    - name: Contracts Validation Summary
      run: |
        echo "üìã CloudEvents Integration Summary"
        echo "=================================="
        echo "‚úÖ CloudEvents schema validation"
        echo "‚úÖ CloudEvents integration tests"
        echo "‚úÖ AP2 contract compatibility"
        echo "‚úÖ Security validation"
        echo ""
        echo "All contracts validation jobs completed!"
