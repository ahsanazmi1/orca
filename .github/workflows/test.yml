name: Test and Validate

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  ORCA_MODE: RULES_ONLY
  ORCA_USE_XGB: false

jobs:
  # Lint and Format Check
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v3
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run linting
      run: |
        echo "üîç Running code linting..."
        uv run ruff check .
        uv run black --check .

    - name: Run type checking
      run: |
        echo "üîç Running type checking..."
        uv run python -m mypy src/orca_core

  # Unit Tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        test-group: ['unit', 'integration']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run unit tests
      if: matrix.test-group == 'unit'
      run: |
        echo "üß™ Running unit tests..."
        uv run python -m pytest tests/ -v --cov=src/orca_core --cov-report=xml -m "not integration"

    - name: Run integration tests
      if: matrix.test-group == 'integration'
      run: |
        echo "üß™ Running integration tests..."
        uv run python -m pytest tests/ -v --cov=src/orca_core --cov-report=xml -m "integration"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-group }},python-${{ matrix.python-version }}
        name: codecov-umbrella

  # Model Training Tests
  test-models:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v3
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Test ML stub model
      run: |
        echo "ü§ñ Testing ML stub model..."
        uv run python -m pytest tests/test_model_stub.py -v

    - name: Test XGBoost training
      run: |
        echo "ü§ñ Testing XGBoost training..."
        uv run python -m orca_core.cli train-xgb --samples 1000
        uv run python -m orca_core.cli model-info

    - name: Test model validation
      run: |
        echo "üß™ Testing model validation..."
        uv run python -m pytest tests/test_ml_hooks.py -v

  # CLI Tests
  test-cli:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v3
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Test CLI commands
      run: |
        echo "üñ•Ô∏è Testing CLI commands..."
        uv run python -m orca_core.cli --help
        uv run python -m orca_core.cli config
        uv run python -m orca_core.cli model-info

    - name: Test decision commands
      run: |
        echo "üñ•Ô∏è Testing decision commands..."
        uv run python -m orca_core.cli decide '{"cart_total": 100.0, "currency": "USD", "rail": "Card", "channel": "online", "features": {"amount": 100.0, "velocity_24h": 1.0, "cross_border": 0}}'
        uv run python -m orca_core.cli decide-file fixtures/requests/low_ticket_ok.json

  # Validation Tests
  test-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v3
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Test validation fixtures
      run: |
        echo "üß™ Testing validation fixtures..."
        uv run python -m orca_core.cli decide-batch --glob "validation/phase2/fixtures/*.json" --format csv --output validation_results.csv

    - name: Test LLM guardrails
      run: |
        echo "üõ°Ô∏è Testing LLM guardrails..."
        uv run python -m pytest tests/test_llm_guardrails.py -v

  # Security Tests
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v3
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run security scan
      run: |
        echo "üîí Running security scan..."
        uv run python -m bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json
        retention-days: 30
